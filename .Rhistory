# set wd to your local repo for this project
setwd("C:/Users/ethompson/Desktop/baseball")
library(tidyr)
library(googlesheets)
library(dplyr)
library(ggplot2)
library(lubridate)
library(truncnorm)
read.csv("2017ANA.EVA")
read.csv("/2017eve/2017ANA.EVA")
read.csv("2017eve/2017ANA.EVA")
read.csv("2017eve/2017ANA.EVA", row.names = FALSE)
read.csv("2017eve/2017ANA.EVA", row.names=null)
read.csv("2017eve/2017ANA.EVA", row.names = NULL)
2017ana <- read.csv("2017eve/2017ANA.EVA", row.names = NULL)
ana <- read.csv("2017eve/2017ANA.EVA", row.names = NULL)
str(ana)
head(ana)
head(ana,50)
#-----Find the Runs Scored in the Remainder of Inning Like Before--------------
library("data.table")
data2011 <- data.table(read.csv("events2011.csv", stringsAsFactors=FALSE))
# set wd to your local repo for this project
setwd("C:/Users/ethompson/Desktop/baseball")
library(tidyr)
library(googlesheets)
library(dplyr)
library(ggplot2)
library(lubridate)
library(truncnorm)
data <- data.table(read.csv("2017eve/events2011.csv", stringsAsFactors=FALSE))
data <- data.table(read.csv("2017eve/events2011.txt", stringsAsFactors=FALSE))
data <- data.table(read.csv("2017eve/data.txt", stringsAsFactors=FALSE))
str(data)
data <- data.table(read.csv("2017eve/data.txt", stringsAsFactors=TRUE, headers = FALSE))
data <- data.table(read.csv("2017eve/data.txt", stringsAsFactors=TRUE, header = FALSE))
str(data)
View(data)
data <- data.table(read.csv("2017eve/data.txt", stringsAsFactors=TRUE, header = TRUE))
str(data)
data <- data.table(read.csv("2017eve/data.txt", stringsAsFactors=TRUE, header = FALSE))
library(RCurl)
library(data.table)
getRetrosheetTeamData <- function(year, ...) {
path <- sprintf("http://www.retrosheet.org/events/%deve.zip", year)
if(RCurl::url.exists(path)) {
tmp <- tempfile()
on.exit(unlink(tmp))
download.file(path, destfile = tmp, ...)
}
read.csv(unz(tmp, file = paste0("TEAM", year)), header = FALSE,
col.names = c("TeamID", "LeagueID", "City", "Name"), stringsAsFactors = FALSE)
}
getRetrosheet <- function(type, year, team, stringsAsFactors = FALSE, ...) {
type <- match.arg(type, choices = c("game", "play", "schedule"))
if(type == "play") {
if(missing(team)) {
stop('argument team must be supplied when type = "play"')
}
franch <- franchiseInfo(select = 1:2)
team <- match.arg(team, unique(unlist(franch, use.names = FALSE)))
}
u <- "http://www.retrosheet.org/"
path <- switch(type,
"game" = "gamelogs/gl%d.zip",
"play" = "events/%deve.zip",
"schedule" = "schedule/%dsked.txt")
fullPath <- sprintf(paste0(u, path), year)
if(RCurl::url.exists(fullPath)) {
if(type == "schedule") {
out <- read.csv(fullPath, header = FALSE,
col.names = retrosheetFields$schedule, stringsAsFactors = stringsAsFactors)
return(out)
}
tmp <- tempfile()
on.exit(unlink(tmp))
download.file(fullPath, destfile = tmp, ...)
} else {
stop(sprintf("'%s' is not a valid url", fullPath))
}
fname <- unzip(tmp, list = TRUE)$Name
if(type == "game") {
out <- read.csv(unz(tmp, file = fname), header = FALSE,
col.names = retrosheetFields$gamelog, stringsAsFactors = stringsAsFactors)
return(out)
}
allTeams <- readLines(unz(tmp, file = paste0("TEAM", year)))
team <- match.arg(team, substr(allTeams, 1, 3))
rgx <- paste(team, "EV", sep = ".")
f <- grep(rgx, fname, value = TRUE, fixed = TRUE)
rawData <- readLines(unz(tmp, file = f))
DE <- strsplit(rawData, ",", fixed = TRUE)
Ids <- vapply(DE, `[`, character(1L), 1L) == "id"
Step1 <- unname(split(DE, cumsum(Ids)))
Step2 <- lapply(Step1, function(x){
split(x, vapply(x, `[`, character(1L), 1L))
})
Step3 <- lapply(Step2, function(x){
lapply(x, function(y) suppressWarnings(do.call(rbind, y)))
})
Step4 <- rapply(Step3, `[`, how = "list", ..1 = , ..2 = -1)
Step5 <- rapply(Step4, gsub, how = "list", pattern = '"', replacement = "")
out <- lapply(Step5, .setColNames)
names(out) <- paste0("game", seq_along(out))
out
}
.setColNames <- function(DATA) {
ord <- with(retrosheetFields, eventOuter[eventOuter %in% names(DATA)])
DATA <- DATA[ord]
mapply(function(x, y) {
if(!is.null(y)) colnames(x) <- y
x
}, DATA, with(retrosheetFields, eventInner[ eventOuter %in% ord ]))
}
retrosheetFields <- structure(list(eventInner = list(NULL, NULL, c("category", "info"
), c("retroID", "name", "team", "batPos", "fieldPos"), c("inning",
"team", "retroID", "count", "pitches", "play"), NULL, c("retroID",
"name", "team", "batPos", "fieldPos"), c("projCode", "retroID",
"ER")), eventOuter = c("id", "version", "info", "start", "play",
"com", "sub", "data"), franchise = c("FranchiseID", "OtherID",
"Lg", "Div", "Loc", "Nick1", "Nick2", "GmFirst", "GmLast", "City",
"State"), gamelog = c("Date", "DblHdr", "Day", "VisTm", "VisTmLg",
"VisTmGNum", "HmTm", "HmTmLg", "HmTmGNum", "VisRuns", "HmRuns",
"NumOuts", "DayNight", "Completion", "Forfeit", "Protest", "ParkID",
"Attendance", "Duration", "VisLine", "HmLine", "VisAB", "VisH",
"VisD", "VisT", "VisHR", "VisRBI", "VisSH", "VisSF", "VisHBP",
"VisBB", "VisIBB", "VisK", "VisSB", "VisCS", "VisGDP", "VisCI",
"VisLOB", "VisPs", "VisER", "VisTER", "VisWP", "VisBalks", "VisPO",
"VisA", "VisE", "VisPassed", "VisDB", "VisTP", "HmAB", "HmH",
"HmD", "HmT", "HmHR", "HmRBI", "HmSH", "HmSF", "HmHBP", "HmBB",
"HmIBB", "HmK", "HmSB", "HmCS", "HmGDP", "HmCI", "HmLOB", "HmPs",
"HmER", "HmTER", "HmWP", "HmBalks", "HmPO", "HmA", "HmE", "HmPass",
"HmDB", "HmTP", "UmpHID", "UmpHNm", "Ump1BID", "Ump1BNm", "Ump2BID",
"Ump2BNm", "Ump3BID", "Ump3BNm", "UmpLFID", "UmpLFNm", "UmpRFID",
"UmpRFNm", "VisMgrID", "VisMgrNm", "HmMgrID", "HmMgrNm", "WinPID",
"WinPNm", "PID", "PNAme", "SavePID", "SavePNm", "GWinRBIID",
"GWinRBINm", "VisStPchID", "VisStPchNm", "HmStPchID", "HmStPchNm",
"VisBat1ID", "VisBat1Nm", "VisBat1Pos", "VisBat2ID", "VisBat2Nm",
"VisBat2Pos", "VisBat3ID", "VisBat3Nm", "VisBat3Pos", "VisBat4ID",
"VisBat4Nm", "VisBat4Pos", "VisBat5ID", "VisBat5Nm", "VisBat5Pos",
"VisBat6ID", "VisBat6Nm", "VisBat6Pos", "VisBat7ID", "VisBat7Nm",
"VisBat7Pos", "VisBat8ID", "VisBat8Nm", "VisBat8Pos", "VisBat9ID",
"VisBat9Nm", "VisBat9Pos", "HmBat1ID", "HmBat1Nm", "HmBat1Pos",
"HmBat2ID", "HmBat2Nm", "HmBat2Pos", "HmBat3ID", "HmBat3Nm",
"HmBat3Pos", "HmBat4ID", "HmBat4Nm", "HmBat4Pos", "HmBat5ID",
"HmBat5Nm", "HmBat5Pos", "HmBat6ID", "HmBat6Nm", "HmBat6Pos",
"HmBat7ID", "HmBat7Nm", "HmBat7Pos", "HmBat8ID", "HmBat8Nm",
"HmBat8Pos", "HmBat9ID", "HmBat9Nm", "HmBat9Pos", "Additional",
"Acquisition"), roster = c("retroID", "Last", "First", "Bat",
"Throw", "Team", "Pos"), schedule = c("Date", "GNum", "Day",
"VisTm", "VisLG", "VisGNum", "HomeTm", "HmLG", "HmGNum", "Morning",
"Postpone", "PPDate")), .Names = c("eventInner", "eventOuter",
"franchise", "gamelog", "roster", "schedule"))
getRetrosheet(play, 2017, SEA)
getRetrosheet("play", 2017, "SEA")
getRetrosheet("game", 2017, "SEA")
getRetrosheet("game", 2017, "SEA")
getRetrosheet("game", 2017, "SEA")
# set wd to your local repo for this project
setwd("C:/Users/ethompson/Desktop/baseball/2017eve")
2017ANA <- data.table(read.csv("2017eve/2017ANA.txt", stringsAsFactors=FALSE, header = FALSE))
ANA2017 <- data.table(read.csv("2017eve/2017ANA.txt", stringsAsFactors=FALSE, header = FALSE))
getwd()
ANA2017 <- data.table(read.csv("2017eve/2017ANA.txt", stringsAsFactors=FALSE, header = FALSE))
# set wd to your local repo for this project
setwd("C:/Users/ethompson/Desktop/baseball")
ANA2017 <- data.table(read.csv("2017eve/2017ANA.txt", stringsAsFactors=FALSE, header = FALSE))
str(ANA2017)
header <- data.table(read.csv("2017eve/headers.csv", stringsAsFactors=FALSE, header = FALSE))
header
names(ANA2017) <- header
str(header)
str(ANA2017)
names(ANA2017) <- as.character(header)
names(ANA2017) <- as.character(names(header))
names(ANA2017) <- names(header)
str(header)
names(ANA2017) <- header[,1]
names(ANA2017) <- as.character(header[,1])
header[,1]
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=FALSE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/headers.csv", stringsAsFactors=FALSE, header = FALSE))
header
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=FALSE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
header
names(ANA2017) <- header[,1]
str(ANA2017)
View(ANA2017)
#--------------------------
# ingest data
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=TRUE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
# add header
names(ANA2017) <- header[,1]
str(ANA2017)
# ingest data
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=TRUE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
# add header
names(ANA2017) <- header[,1]
str(ANA2017)
# ingest data
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=TRUE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
# add header
names(ANA2017) <- header[,1]
str(ANA2017)
View(ANA2017)
# set wd to your local repo for this project
setwd("C:/Users/ethompson/Desktop/baseball")
# install "googlesheets" R package
# devtools::install_github("jennybc/googlesheets")
# if you need to authenticate, try this
# gs_auth(new_user = TRUE)
# for BigQuery reads/writes
#library(bigrquery)
#library(jsonlite)
#library(googlesheets)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(truncnorm)
library(RCurl)
library(data.table)
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=TRUE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
# add header
names(ANA2017) <- header[,1]
str(ANA2017)
rm(ana)
ANA2017$runs <- with(ANA2017, vis_score + home_score)
ANA2017$half_inning <- with(ANA2017, paste(game_id, inning, batting_teams))
# ingest data
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=TRUE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
# add header
names(ANA2017) <- header[,1]
ANA2017$runs <- with(ANA2017, vis_score + home_score)
ANA2017$half_inning <- with(ANA2017, paste(game_id, inning, batting_teams))
ANA2017$half_inning <- with(ANA2017, paste(game_id, inning, batting_team))
ANA2017$runs_scored <- with(ANA2017, (batter_dest > 3) +
(runner_on_1st_dest > 3) +
(runner_on_2nd_dest > 3) +
(runner_on_3rd_dest > 3))
# ingest data
ANA2017 <- as.data.frame(read.csv("2017eve/2017ANA.txt", stringsAsFactors=TRUE, header = FALSE))
header <- as.data.frame(read.csv("2017eve/header.csv", stringsAsFactors=FALSE, header = FALSE))
# add header
names(ANA2017) <- header[,1]
ANA2017$runs <- with(ANA2017, vis_score + home_score)
ANA2017$half_inning <- with(ANA2017, paste(game_id, inning, batting_team))
ANA2017$runs_scored <- with(ANA2017, (batter_dest > 3) +
(runner_on_1st_dest > 3) +
(runner_on_2nd_dest > 3) +
(runner_on_3rd_dest > 3))
runs_scored_inning <- aggregate(ANA2017$runs_scored, list(half_inning = ANA20172011$half_inning) sum)
runs_scored_inning <- aggregate(ANA2017$runs_scored, list(half_inning = ANA20172011$half_inning), sum)
runs_scored_inning <- aggregate(ANA2017$runs_scored, list(half_inning = ANA2017$half_inning), sum)
runs_scored_start <- aggregate(ANA2017$runs, list(half_inning = ANA2017$half_inning), "[", 1)
max <- data.frame(half_inning = runs_scored_start$half_inning)
max$x <- runs_scored_inning$x + runs_scored_start$x
ANA2017 <- merge(ANA2017, max)
n <- ncol(ANA2017)
names(ANA2017)[n] <- "max_runs"
ANA2017$runs_roi <- with(ANA2017, max_runs - runs)
runner_1 <- ifelse(as.character(ANA2017[ , "base1_run_id"]) == "", 0, 1)
runner_2 <- ifelse(as.character(ANA2017[ , "base2_run_id"]) == "", 0, 1)
runner_3 <- ifelse(as.character(ANA2017[ , "base3_run_id"]) == "", 0, 1)
runner1 <- ifelse(as.character(ANA2017[ , "first_runner"]) == "", 0, 1)
runner2 <- ifelse(as.character(ANA2017[ , "second_runner"]) == "", 0, 1)
runner3 <- ifelse(as.character(ANA2017[ , "third_runner"]) == "", 0, 1)
get.state <- function(runner1, runner2, runner3, outs){
runners <- paste(runner1, runner2, runner3, sep = "")
paste(runners, outs)
}
ANA2017$state <- get.state(runner1, runner2, runner3, ANA2017$outs)
n_runner1 <- with(ANA2017, as.numeric(runner_on_1st_dest == 1 | batter_dest== 1))
n_runner2 <- with(ANA2017, as.numeric(runner_on_1st_dest == 2 | runner_on_2nd_dest == 2 | batter_dest== 2))
n_runner2 <- with(ANA2017, as.numeric(runner_on_1st_dest == 3 | runner_on_2nd_dest == 3 | runner_on_3rd_dest == 3 | batter_dest== 3))
n_outs <- with(ANA2017, outs + outs_on_play)
ANA2017$new_state <- get.state(n_runner1, n_runner2, n_runner3, n_outs)
n_runner1 <- with(ANA2017, as.numeric(runner_on_1st_dest == 1 | batter_dest== 1))
n_runner2 <- with(ANA2017, as.numeric(runner_on_1st_dest == 2 | runner_on_2nd_dest == 2 | batter_dest== 2))
n_runner3 <- with(ANA2017, as.numeric(runner_on_1st_dest == 3 | runner_on_2nd_dest == 3 | runner_on_3rd_dest == 3 | batter_dest== 3))
n_outs <- with(ANA2017, outs + outs_on_play)
ANA2017$new_state <- get.state(n_runner1, n_runner2, n_runner3, n_outs)
library(plyr)
data_outs <- ddply(ANA2017, .(half_inning), summarise, outs_inning = sum(outs_on_play))
ANA2017 <- merge(ANA2017, data_outs)
ANA2017c <- subset(ANA2017, outs_inning == 3)
runs <- with(ANA2017c, aggregate(runs_roi, list(state), mean))
runs$outs <- substr(runs$group, 5, 5)
runs$outs <- substr(runs$Group.1, 5, 5)
runs <- runs[order(runs$outs), ]
runs_out <- matrix(round(runs$x, 2), 8, 3)
dimnames(runs_out)[[2]] <- c("0 outs", "1 out", "2 outs")
dimnames(runs_out)[[1]] <- c("000", "001", "010", "011", "100", "101", "110", "111")
runs_out
library(dplyr)
